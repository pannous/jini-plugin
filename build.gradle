plugins {
    id("java")
    id("org.jetbrains.intellij") version "1.13.2"
    id 'com.github.johnrengelman.shadow' version '7.0.0' // bundle all dependencies into a single jar
}

group = "com.pannous"
version = "1.2.3.018"

shadowJar {
    archiveClassifier.set("all")
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
        )
    }
}

intellij {
    version = '2022.3.3'
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            exclude("**/**Test.java")
            exclude("**/OpenAI3.java")
            exclude("**/theokanning/**")
        }
    }
}

test {
    sourceSets {
        test {
            java.srcDir 'src/main/test/'
        }
    }
    classpath = sourceSets.test.runtimeClasspath
    useJUnitPlatform()
}


dependencies {
//    implementation('org.junit.jupiter:junit-jupiter-api:5.9.2')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.9.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.9.2')
}

// Configure Gradle IntelliJ Plugin
// Read more: https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin.html
intellij {
    version.set("2022.3.3")
    type.set("CL") // Target IDE Platform
//    IC - IntelliJ IDEA Community Edition
//    IU - IntelliJ IDEA Ultimate Edition
//    CL - CLion
//    PY - PyCharm Professional Edition
//    PC - PyCharm Community Edition
//    PS - PhpStorm
//    RD - Rider
//    GO - GoLand
//    AI - Android Studio

//    plugins.set(listOf(/* Plugin Dependencies */))
}

tasks {
    apply plugin: 'java'

    sourceCompatibility = "17"
    targetCompatibility = "17"

    patchPluginXml {
        sinceBuild.set("222")
        untilBuild.set("223.*")
//        sinceBuild.set("223")
//        untilBuild.set("999.*")


    }

    signPlugin {
        certificateChain.set(System.getenv("CERTIFICATE_CHAIN"))
        privateKey.set(System.getenv("PRIVATE_KEY"))
        password.set(System.getenv("PRIVATE_KEY_PASSWORD"))
    }

    publishPlugin {
        token.set(System.getenv("PUBLISH_TOKEN"))
    }
}
